// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	RAM8(in[0..15]=in[0..15], load=lsel0, address[0..2]=address[3..5], out=r0);
	RAM8(in[0..15]=in[0..15], load=lsel1, address[0..2]=address[3..5], out=r1);
	RAM8(in[0..15]=in[0..15], load=lsel2, address[0..2]=address[3..5], out=r2);
	RAM8(in[0..15]=in[0..15], load=lsel3, address[0..2]=address[3..5], out=r3);
	RAM8(in[0..15]=in[0..15], load=lsel4, address[0..2]=address[3..5], out=r4);
	RAM8(in[0..15]=in[0..15], load=lsel5, address[0..2]=address[3..5], out=r5);
	RAM8(in[0..15]=in[0..15], load=lsel6, address[0..2]=address[3..5], out=r6);
	RAM8(in[0..15]=in[0..15], load=lsel7, address[0..2]=address[3..5], out=r7);
	DMux8Way(in=load, sel[0..2]=address[0..2],
				a=lsel0, b=lsel1, c=lsel2, d=lsel3,
				e=lsel4, f=lsel5, g=lsel6, h=lsel7);
	Mux8Way16(a[0..15]=r0, b[0..15]=r1, c[0..15]=r2, d[0..15]=r3,
				e[0..15]=r4, f[0..15]=r5, g[0..15]=r6, h[0..15]=r7,
				sel[0..2]=address[0..2], out[0..15]=out[0..15]);
}